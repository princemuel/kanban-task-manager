// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?

  boards Board[]

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Board {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  name    String
  tasks   Task[]
  columns Column[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  @@unique([name])
  @@map("boards")
}

model Column {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  name String @default("todo")

  tasks Task[]

  board   Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String? @db.ObjectId

  @@unique([name])
  @@map("columns")
}

model Task {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  title       String
  description String
  status      String

  order    Int?
  subtasks SubTask[]

  board    Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId  String @db.ObjectId
  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId String @db.ObjectId

  @@unique([title])
  @@index([order, id])
  @@map("tasks")
}

model SubTask {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  title String
  done  Boolean @default(false)

  Task   Task?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String? @db.ObjectId

  @@unique([title])
  @@map("subtasks")
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.String
  access_token             String? @db.String
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
